using IndeedIQ.Common.Domain.Contracts;

using System.Collections.Generic;

namespace IndeedIQ.Common.Domain.Entities
{
    /// <summary>
    /// Aggregate is a pattern in Domain-Driven Design. 
    /// A DDD aggregate is a cluster of domain objects that can be treated as a single unit. 
    /// https://martinfowler.com/bliki/DDD_Aggregate.html
    /// </summary>
    public interface IAggregateRoot : IEntity
    {
        /// <summary>
        /// A collection of events generated by this entity during this session. <see cref="DomainEvent"/>
        /// </summary>
        /// <remarks>
        /// Events are not persisted, they are published and gone after de entity is destroyed from memory.
        /// </remarks>
        IReadOnlyCollection<DomainEvent> Events { get; }
    }
}
